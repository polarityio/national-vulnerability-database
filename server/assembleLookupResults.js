const {
  flow,
  get,
  size,
  find,
  eq,
  map,
  some,
  isEmpty,
  filter,
  join,
  flatMap
} = require('lodash/fp');

const assembleLookupResults = (entities, vulnerabilities, options) =>
  map((entity) => {
    const resultsForThisEntity = getResultsForThisEntity(
      entity,
      vulnerabilities,
      options
    );

    const resultsFound = some(
      (resultField) => size(resultField) || resultField === true,
      resultsForThisEntity
    );

    const lookupResult = {
      entity,
      data: resultsFound
        ? {
            summary: createSummaryTags(resultsForThisEntity, options),
            details: resultsForThisEntity
          }
        : null
    };

    return lookupResult;
  }, entities);

const getResultForThisEntity = (entity, results) =>
  flow(find(flow(get('entity.value'), eq(entity.value))), get('result'))(results);

const getResultsForThisEntity = (entity, vulnerabilities, options) => ({
  vulnerability: preprocessVulnerabilityFields(
    getResultForThisEntity(entity, vulnerabilities)
  )
});
const preprocessVulnerabilityFields = (vulnerability) => {
  return {
    ...vulnerability,
    description: flow(
      get('descriptions'),
      filter(flow(get('lang'), eq('en'))),
      map('value'),
      join(' --- ')
    )(vulnerability),
    hasMetrics: !isEmpty(vulnerability.metrics),
    weaknesses: flow(
      get('weaknesses'),
      flatMap((weakness) =>
        flow(
          get('description'),
          filter(flow(get('lang'), eq('en'))),
          map((weaknessDescription) => ({
            cwe: weaknessDescription.value,
            source: weakness.source
          }))
        )(weakness)
      )
    )(vulnerability),
    affectedSoftwareConfigurations: map(
      (configuration) => flatMap(get('cpeMatch'), configuration.nodes),
      vulnerability.configurations
    )
  };
};
const createSummaryTags = ({ vulnerability }, options) =>
  [].concat(!isEmpty(vulnerability) ? `Vuln Found` : []);

module.exports = assembleLookupResults;
